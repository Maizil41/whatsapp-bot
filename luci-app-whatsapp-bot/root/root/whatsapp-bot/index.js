const{makeWASocket,DisconnectReason,useMultiFileAuthState,downloadMediaMessage}=require('@whiskeysockets/baileys');const createServer=require('./server');const{db}=require('./db');const qrcode=require('qrcode');const fs=require('fs');const path=require('path');const configPath='/etc/config/whatsapp-bot';function getConfigValue(optionName){try{const data=fs.readFileSync(configPath,'utf8');const lines=data.split('\n');for(let line of lines){line=line.trim();if(line.startsWith(`option ${optionName}`)){const value=line.split("'")[1];return value}}
return null}catch(err){return null}}
const adminNumber=getConfigValue('admin_number');const admin_number=`${adminNumber}@s.whatsapp.net`;let daftarPengguna=[];let pembelianPaket={};let sock;function updateDaftarPengguna(userId,updatedData){const query='UPDATE client SET username = ?, password = ?, whatsapp_number = ?, telegram_id = ?, balance = ? WHERE id = ?';db.query(query,[updatedData.username,updatedData.password,updatedData.whatsapp_number,updatedData.telegram_id,updatedData.balance,userId],(err)=>{if(err)throw err})}
function loadDaftarPengguna(){return new Promise((resolve,reject)=>{const query='SELECT * FROM client';db.query(query,(err,results)=>{if(err){reject(err)}else{daftarPengguna=results;resolve(results)}})})}
async function connectToWhatsApp(){const{state,saveCreds}=await useMultiFileAuthState('./auth_info');sock=makeWASocket({printQRInTerminal:!1,auth:state});sock.ev.on('connection.update',async(update)=>{const{connection,isOnline,qr}=update;if(connection){if(connection==='open'){console.log('Koneksi berhasil!');try{fs.unlinkSync('./qr_code.png');console.log('QR Code berhasil dihapus.')}catch(err){console.error('Gagal menghapus QR Code:',err)}}else if(connection==='close'){connectToWhatsApp()}}
if(typeof isOnline!=='undefined'){console.log(isOnline?'Online':'Offline')}
if(qr){try{await qrcode.toFile('./public/qr_code.png',qr)}catch(err){console.error('Gagal menyimpan QR Code',err)}}});sock.ev.on('creds.update',saveCreds);const sendMessageWithRetry=async(to,messageOptions,retries=5)=>{try{await sock.sendMessage(to+'@s.whatsapp.net',messageOptions);return!0}catch(error){if(error.message.includes("Connection Closed")){await connectToWhatsApp();if(!sock.isConnected()){throw new Error("Koneksi tidak berhasil setelah reconnect.")}
if(retries>0){await new Promise(resolve=>setTimeout(resolve,2000));return sendMessageWithRetry(to,messageOptions,retries-1)}else{return!1}}else{return!1}}};sock.ev.on('messages.upsert',async(m)=>{await loadDaftarPengguna();const message=m.messages[0];const remoteJid=message?.key?.remoteJid;const fromMe=message?.key?.fromMe;const messageText=message?.message?.conversation||'';if(fromMe)return;const senderNumber=remoteJid.split('@')[0];const isAdmin=remoteJid===admin_number;const isRegistered=!isAdmin&&daftarPengguna.some(user=>user.whatsapp_number===senderNumber);if(!isRegistered&&!messageText.toLowerCase().startsWith('daftar')&&!isAdmin){await sock.sendMessage(remoteJid,{text:'*Anda belum terdaftar. Ketik Daftar untuk mendaftar.*'});return}
if(messageText.toLowerCase().startsWith('daftar')){await loadDaftarPengguna();const isRegistered=daftarPengguna.some(user=>user.whatsapp_number===senderNumber);if(isRegistered){await sock.sendMessage(remoteJid,{text:'*Anda sudah terdaftar.*\n*Ketik Menu untuk melihat daftar menu*'})}else{const nama=messageText.split(' ')[1];if(nama){const query=`
                        INSERT INTO client (username, password, whatsapp_number, telegram_id, balance) 
                        VALUES (?, ?, ?, ?, ?)`;const values=[nama,nama,senderNumber,'','0'];db.query(query,values,async(error)=>{if(error){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan saat mendaftar. Silakan coba lagi.*'});return}
daftarPengguna.push({username:nama,password:nama,whatsapp_number:senderNumber,telegram_id:'',balance:'0'});await sock.sendMessage(remoteJid,{text:`*Anda berhasil didaftarkan!* \n*Ketik Menu untuk melihat daftar menu.*`});await sock.sendMessage(admin_number,{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬ PELANGGAN BARU ▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Nama : ${nama}*\n*Nomor : ${senderNumber}*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Mendaftar Via WhatsApp*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`})})}else{await sock.sendMessage(remoteJid,{text:'*Gunakan perintah Daftar <nama_anda>.*'})}}}else if(messageText.toLowerCase().startsWith('topup')){await loadDaftarPengguna();let amount=messageText.split(' ')[1];if(amount){amount=amount.replace(/^0+/,'').replace(/[.,]/g,'');if(!amount||isNaN(amount)){await sock.sendMessage(remoteJid,{text:'*Masukkan jumlah yang valid.*'});return}
amount=parseInt(amount,10);if(amount<10000){await sock.sendMessage(remoteJid,{text:'*Permintaan topup minimal adalah 10.000*'});return}else if(amount>100000){await sock.sendMessage(remoteJid,{text:'*Permintaan topup maksimal adalah 100.000*'});return}
const pengguna=daftarPengguna.find(user=>user.whatsapp_number===senderNumber);if(pengguna){const nama=pengguna.username;const uid=pengguna.id;const queryInsert=`
                INSERT INTO topup (user_id, username, amount, status) 
                VALUES (?, ?, ?, ?)`;const values=[uid,nama,amount,'Pending'];db.query(queryInsert,values,async(error)=>{if(error){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan saat memproses topup Anda.*'});return}
const querySelect=`SELECT id FROM topup WHERE user_id = ? AND status = 'Pending' ORDER BY date DESC LIMIT 1`;db.query(querySelect,[uid],async(error,rows)=>{if(error){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan saat mengambil ID topup.*'});return}
const topupId=rows[0]?.id;if(!topupId){await sock.sendMessage(remoteJid,{text:'*ID topup tidak ditemukan.*'});return}
await sock.sendMessage(admin_number,{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬   PERMINTAAN TOPUP  ▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Nama : ${nama}*\n*Nomor : ${senderNumber}*\n*Jumlah : Rp.${amount}*\n*Topup ID : ${topupId}*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`});await sock.sendMessage(remoteJid,{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬   TOPUP INVOICE  ▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*# LAKUKAN PEMBAYARAN KE #*\n\n*•DANA : ${adminNumber}*\n*•OVO    : ${adminNumber}*\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*JIKA SUDAH MELAKUKAN*\n*PEMBAYARAN KIRIMKAN BUKTI*\n*TRANSFER KESINI*\n\n*BATAS WAKTU PEMBAYARAN*\n*SAMPAI 1 JAM KEDEPAN*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Nama : ${nama}*\n*Nomor : ${senderNumber}*\n*Jumlah : Rp.${amount}*\n*Topup ID : ${topupId}*\n*Status : PENDING*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`})})})}else{await sock.sendMessage(remoteJid,{text:'*Data anda tidak ditemukan. Pastikan Anda sudah terdaftar.*'})}}else{await sock.sendMessage(remoteJid,{text:'*Gunakan perintah Topup <jumlah>.*'})}}else if(messageText.toLowerCase().startsWith('saldo')){await loadDaftarPengguna();if(isAdmin){let allSaldo='▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬ DAFTAR PELANGGAN ▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬';daftarPengguna.forEach(user=>{allSaldo+=`\n*NAMA : ${user.username}*\n*NOMOR : ${user.whatsapp_number}*\n*SALDO : Rp.${user.balance}*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`});await sock.sendMessage(remoteJid,{text:allSaldo})}else{const pengguna=daftarPengguna.find(user=>user.whatsapp_number===senderNumber);if(pengguna){await sock.sendMessage(remoteJid,{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬ INFORMASI SALDO ▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Nama : ${pengguna.username}*\n*Nomor : ${pengguna.whatsapp_number}*\n*Saldo : Rp.${pengguna.balance}*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`})}else{await sock.sendMessage(remoteJid,{text:'*Data saldo anda tidak ditemukan.*'})}}}else if(messageText.toLowerCase().startsWith('menu')){await loadDaftarPengguna();const isAdmin=remoteJid===admin_number;if(isAdmin){await sock.sendMessage(remoteJid,{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬ DAFTAR MENU ADMIN ▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n*•Accept - Konfirmasi topup*\n*•Reject - Tolak topup*\n*•Pending - List permintaan topup*\n*•Saldo - List saldo pengguna*\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`})}else{await sock.sendMessage(remoteJid,{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n *▬▬▬   DAFTAR MENU   ▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n\n*•Topup - Isi ulang saldo*\n*•Beli - Beli voucher*\n*•Saldo - Melihat sisa saldo*\n\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`})}}else if(messageText.toLowerCase().startsWith('beli')){await loadDaftarPengguna();const args=messageText.split(' ');if(args.length===1){db.query(`
            SELECT DISTINCT groups.groupname, billing_plans.planCost, billing_plans.planCode 
            FROM (
                SELECT groupname FROM radgroupcheck 
                UNION 
                SELECT groupname FROM radgroupreply
            ) AS groups 
            JOIN billing_plans ON groups.groupname = billing_plans.planName 
            WHERE billing_plans.planCode IS NOT NULL AND billing_plans.planCost > 0`,async(error,results)=>{if(error){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan saat mengambil data paket. Silakan coba lagi.*'});return}
let paketList=results.map(row=>`*Paket: ${row.groupname}*\n*Harga: ${row.planCost}*\n*Kode: ${row.planCode}*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`).join('\n');await sock.sendMessage(remoteJid,{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬   DAFTAR PAKET  ▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n${paketList}\n\n*Ketik Beli <Kode_Paket>*`});pembelianPaket[senderNumber]=!0})}else{const paketPilihan=args[1];if(!pembelianPaket[senderNumber]){await sock.sendMessage(remoteJid,{text:'*Silakan ketik Beli untuk melihat daftar paket.*'});return}
db.query(`
            SELECT DISTINCT groups.groupname, billing_plans.planCost, billing_plans.planCode 
            FROM (
                SELECT groupname FROM radgroupcheck 
                UNION 
                SELECT groupname FROM radgroupreply
            ) AS groups 
            JOIN billing_plans ON groups.groupname = billing_plans.planName 
            WHERE billing_plans.planCode IS NOT NULL AND billing_plans.planCost > 0`,async(error,results)=>{if(error){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan sistem saat mengambil data paket.*\n*Silahkan ulangi lagi.*'});return}
const paketData=results.find(row=>row.planCode.toLowerCase()===paketPilihan.toLowerCase());if(!paketData){await sock.sendMessage(remoteJid,{text:`*Tidak ada paket dengan kode [${paketPilihan}]*\n*Ketik Beli untuk melihat daftar paket*.`});return}
const hargaPaket=paketData.planCost;const pengguna=daftarPengguna.find(user=>user.whatsapp_number===senderNumber);if(!pengguna){await sock.sendMessage(remoteJid,{text:'*Data Anda tidak ditemukan.*\n*Pastikan Anda sudah terdaftar.*\n*Jika belum ketik Daftar <Nama>*'});return}
const namaPaket=paketData.groupname;if(parseInt(pengguna.balance)<hargaPaket){await sock.sendMessage(remoteJid,{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬▬ BELI VOUCHER ▬▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Saldo anda tidak cukup untuk*\n*membeli paket*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Nama Paket : ${namaPaket}*\n*Kode Paket : ${paketPilihan}*\n*Harga Paket : Rp.${hargaPaket}*\n*Saldo Anda  : Rp.${pengguna.balance}*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Silahkan pilih paket lain atau isi*\n*ulang saldo anda*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`});return}
pengguna.balance=(parseInt(pengguna.balance)-hargaPaket).toString();const updatedData={username:pengguna.username,password:pengguna.password,whatsapp_number:pengguna.whatsapp_number,telegram_id:pengguna.telegram_id,balance:pengguna.balance};updateDaftarPengguna(pengguna.id,updatedData);function getCurrentTime(){const now=new Date();const year=now.getFullYear();const month=String(now.getMonth()+1).padStart(2,'0');const day=String(now.getDate()).padStart(2,'0');const hours=String(now.getHours()).padStart(2,'0');const minutes=String(now.getMinutes()).padStart(2,'0');const seconds=String(now.getSeconds()).padStart(2,'0');return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`}
const generateCode=(length=6)=>{const chars='123456789ABCDEFGHIJKLMNPQRSTUVWXYZ';let result='';for(let i=0;i<length;i++){const randomIndex=Math.floor(Math.random()*chars.length);result+=chars[randomIndex]}
return result};const code=generateCode();db.query("INSERT INTO radcheck (username, attribute, op, value) VALUES (?, ?, ?, ?)",[code,"Auth-Type",":=","Accept"],async(err)=>{if(err){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan sistem saat proses pembelian.*\n*Silahkan ulangi lagi.*'});return}
db.query("INSERT INTO radusergroup (username, groupname, priority) VALUES (?, ?, ?)",[code,paketData.groupname,0],(err)=>{if(err){return}});const username=code;const firstname=pengguna.username;const lastname='';const email='';const department='';const company='';const workphone='';const homephone='';const mobilephone=senderNumber;const address='';const city='';const state='';const country='';const zip='';const notes='';const changeuserinfo='0';const portalloginpassword='';const creationdate=getCurrentTime();const creationby=pengguna.username;db.query("INSERT INTO userinfo (username, firstname, lastname, email, department, company, workphone, homephone, mobilephone, address, city, state, country, zip, notes, changeuserinfo, portalloginpassword, creationdate, creationby) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",[username,firstname,lastname,email,department,company,workphone,homephone,mobilephone,address,city,state,country,zip,notes,changeuserinfo,portalloginpassword,creationdate,creationby],(err)=>{if(err){return}});const planName=paketData.groupname;const contactperson=pengguna.username;const phone=senderNumber;const paymentmethod='cash';const cash=hargaPaket;const creditcardname='';const creditcardnumber='';const creditcardverification='';const creditcardtype='';const creditcardexp='';const changeuserbillinfo='0';const lead='';const coupon='';const ordertaker='';const billstatus='active';const nextinvoicedue='0';const billdue='0';const postalinvoice='';const faxinvoice='';const emailinvoice='';db.query("INSERT INTO userbillinfo (username, planName, contactperson, company, email, phone, address, city, state, country, zip, paymentmethod, cash, creditcardname, creditcardnumber, creditcardverification, creditcardtype, creditcardexp, notes, changeuserbillinfo, lead, coupon, ordertaker, billstatus, nextinvoicedue, billdue, postalinvoice, faxinvoice, emailinvoice, creationdate, creationby) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",[username,planName,contactperson,company,email,phone,address,city,state,country,zip,paymentmethod,cash,creditcardname,creditcardnumber,creditcardverification,creditcardtype,creditcardexp,notes,changeuserbillinfo,lead,coupon,ordertaker,billstatus,nextinvoicedue,billdue,postalinvoice,faxinvoice,emailinvoice,creationdate,creationby],(err)=>{if(err){return}});await sock.sendMessage(remoteJid,{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬ VOUCHER INVOICE ▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Paket : ${paketData.groupname}*\n*Harga : Rp.${hargaPaket}*\n*Sisa Saldo : Rp.${pengguna.balance}*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬▬▬  ${code}  ▬▬▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`})})})}}else if(isAdmin){if(messageText.toLowerCase().startsWith('accept')){await loadDaftarPengguna();const args=messageText.split(' ');if(args.length===2){const id=args[1];db.query(`SELECT user_id, username, amount FROM topup WHERE id = ? AND status = 'Pending'`,[id],async(error,results)=>{if(error){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan saat mengambil data paket. Silahkan coba lagi.*'});return}
if(results.length>0){const{username,amount}=results[0];db.query(`UPDATE topup SET status = 'Accept' WHERE id = ? AND status = 'Pending'`,[id],async(updateError)=>{if(updateError){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan sistem saat memperbarui status.*\n*Silahkan coba lagi.*'});return}
const penggunaExist=daftarPengguna.find(user=>user.username===username);if(penggunaExist){penggunaExist.balance=(parseInt(penggunaExist.balance)+amount);await sock.sendMessage(remoteJid,{text:`*💰 Permintaan topup Rp.${amount} dari ${username} telah disetujui.*`});const nomorPengguna=penggunaExist.whatsapp_number;await sock.sendMessage(nomorPengguna+'@s.whatsapp.net',{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬   TOPUP INVOICE  ▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Nama : ${username}*\n*Nomor : ${nomorPengguna}*\n*Jumlah : Rp.${amount}*\n*Topup ID : ${id}*\n*Status : SUKSES*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`});const updatedData={username:penggunaExist.username,password:penggunaExist.password,whatsapp_number:penggunaExist.whatsapp_number,telegram_id:penggunaExist.telegram_id,balance:penggunaExist.balance};updateDaftarPengguna(penggunaExist.id,updatedData)}else{await sock.sendMessage(remoteJid,{text:'*Pengguna tidak ditemukan.*'})}})}else{await sock.sendMessage(remoteJid,{text:'*Data tidak ditemukan.*'})}})}else{await sock.sendMessage(remoteJid,{text:'*Format perintah salah. Gunakan: Accept <TOPUP_ID>*'})}}else if(messageText.toLowerCase().startsWith('reject')){await loadDaftarPengguna();const args=messageText.split(' ');if(args.length===2){const id=args[1];db.query(`SELECT user_id, username, amount FROM topup WHERE id = ? AND status = 'Pending'`,[id],async(error,results)=>{if(error){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan sistem saat mengambil data paket.*\n*Silakhan coba lagi.*'});return}
if(results.length>0){const{username,amount}=results[0];db.query(`UPDATE topup SET status = 'Reject' WHERE id = ? AND status = 'Pending'`,[id],async(updateError)=>{if(updateError){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan sistem saat memperbarui status.*\n*Silahkan coba lagi.*'});return}
const penggunaExist=daftarPengguna.find(user=>user.username===username);if(penggunaExist){penggunaExist.balance=(parseInt(penggunaExist.balance)+amount);await sock.sendMessage(remoteJid,{text:`*💰 Permintaan topup Rp.${amount} dari ${username} tidak disetujui.*`});const nomorPengguna=penggunaExist.whatsapp_number;await sock.sendMessage(nomorPengguna+'@s.whatsapp.net',{text:`▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬   TOPUP INVOICE  ▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*Nama : ${username}*\n*Nomor : ${nomorPengguna}*\n*Jumlah : Rp.${amount}*\n*Topup ID : ${id}*\n*Status : GAGAL*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`})}else{await sock.sendMessage(remoteJid,{text:'*Data tidak ditemukan.*'})}})}else{await sock.sendMessage(remoteJid,{text:'*Data tidak ditemukan.*'})}})}else{await sock.sendMessage(remoteJid,{text:'*Format perintah salah. Gunakan: Reject <TOPUP_ID>*'})}}else if(messageText.toLowerCase()==='pending'){await loadDaftarPengguna();db.query(`SELECT id, user_id, username, amount FROM topup WHERE status = 'Pending'`,async(error,results)=>{if(error){await sock.sendMessage(remoteJid,{text:'*Terjadi kesalahan sistem saat mengambil data Topup.*\n*Silakan coba lagi.*'});return}
if(results.length>0){let responseMessage='▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n*▬▬▬  TOPUP  PENDING  ▬▬▬*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬';results.forEach(result=>{responseMessage+=`\n*Nnama : ${result.username}*\n*Jumlah : Rp.${result.amount}*\n*Topup ID : ${result.id}*\n▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬`});await sock.sendMessage(remoteJid,{text:responseMessage})}else{await sock.sendMessage(remoteJid,{text:'*Tidak ada permintaan Topup saat ini.*'})}})}}else if(message?.message?.imageMessage){const buffer=await downloadMediaMessage(message,'buffer');const dirPath=path.join(__dirname,'bukti_transfer',senderNumber);const filePath=path.join(dirPath,`${Date.now()}.jpg`);if(!fs.existsSync(dirPath)){fs.mkdirSync(dirPath,{recursive:!0})}
fs.writeFileSync(filePath,buffer);await sock.sendMessage(admin_number,{text:`Bukti transfer diterima dari ${senderNumber}.`,image:{url:filePath}});await sock.sendMessage(remoteJid,{text:'*Bukti transfer Anda telah diterima dan menunggu konfirmasi dari admin.*'})}else{await sock.sendMessage(remoteJid,{text:'*Perintah tidak tersedia.*\n*Ketik Menu untuk melihat daftar perintah.*'})}})}
createServer(sock,connectToWhatsApp);connectToWhatsApp()